/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  OAuthResponse,
  PostLogin,
  PostOAuth,
  PostPasswordReset,
  PostResendEmailRequest,
  PostUserRequest,
  UserInfoResponse,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  OAuthResponseFromJSON,
  OAuthResponseToJSON,
  PostLoginFromJSON,
  PostLoginToJSON,
  PostOAuthFromJSON,
  PostOAuthToJSON,
  PostPasswordResetFromJSON,
  PostPasswordResetToJSON,
  PostResendEmailRequestFromJSON,
  PostResendEmailRequestToJSON,
  PostUserRequestFromJSON,
  PostUserRequestToJSON,
  UserInfoResponseFromJSON,
  UserInfoResponseToJSON,
} from "../models/index";

export interface CreateUserAuthUserPostRequest {
  postUserRequest: PostUserRequest;
}

export interface DicordCallbackAuthCallbackDiscordGetRequest {
  code: string;
}

export interface EmailVerifyAuthUserVerifyAccountGetRequest {
  verificationCode: string;
}

export interface GoogleCallbackAuthCallbackGoogleGetRequest {
  code: string;
}

export interface LoginAuthLoginPostRequest {
  postLogin: PostLogin;
}

export interface OauthLoginAuthOauthAuthorizationPostRequest {
  postOAuth: PostOAuth;
}

export interface PasswordResetAuthUserPasswordResetPostRequest {
  verificationCode: string;
  postPasswordReset: PostPasswordReset;
}

export interface PasswordResetEmailAuthUserPasswordResetEmailPutRequest {
  email: string;
}

export interface ResendVerificationEmailAuthUserVerifyResendEmailPostRequest {
  postResendEmailRequest: PostResendEmailRequest;
}

export interface XCallbackAuthCallbackPatreonGetRequest {
  code: string;
}

export interface XCallbackAuthCallbackXGetRequest {
  code: string;
}

/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI {
  /**
   * Create User
   */
  async createUserAuthUserPostRaw(
    requestParameters: CreateUserAuthUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserInfoResponse>> {
    if (requestParameters["postUserRequest"] == null) {
      throw new runtime.RequiredError(
        "postUserRequest",
        'Required parameter "postUserRequest" was null or undefined when calling createUserAuthUserPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/user`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostUserRequestToJSON(requestParameters["postUserRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create User
   */
  async createUserAuthUserPost(
    requestParameters: CreateUserAuthUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserInfoResponse> {
    const response = await this.createUserAuthUserPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Dicord-Callback
   */
  async dicordCallbackAuthCallbackDiscordGetRaw(
    requestParameters: DicordCallbackAuthCallbackDiscordGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["code"] == null) {
      throw new runtime.RequiredError(
        "code",
        'Required parameter "code" was null or undefined when calling dicordCallbackAuthCallbackDiscordGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/callback/discord`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Dicord-Callback
   */
  async dicordCallbackAuthCallbackDiscordGet(
    requestParameters: DicordCallbackAuthCallbackDiscordGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.dicordCallbackAuthCallbackDiscordGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Email Verify
   */
  async emailVerifyAuthUserVerifyAccountGetRaw(
    requestParameters: EmailVerifyAuthUserVerifyAccountGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["verificationCode"] == null) {
      throw new runtime.RequiredError(
        "verificationCode",
        'Required parameter "verificationCode" was null or undefined when calling emailVerifyAuthUserVerifyAccountGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["verificationCode"] != null) {
      queryParameters["verification_code"] =
        requestParameters["verificationCode"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/user/verify/account`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Email Verify
   */
  async emailVerifyAuthUserVerifyAccountGet(
    requestParameters: EmailVerifyAuthUserVerifyAccountGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.emailVerifyAuthUserVerifyAccountGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Google-Callback
   */
  async googleCallbackAuthCallbackGoogleGetRaw(
    requestParameters: GoogleCallbackAuthCallbackGoogleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["code"] == null) {
      throw new runtime.RequiredError(
        "code",
        'Required parameter "code" was null or undefined when calling googleCallbackAuthCallbackGoogleGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/callback/google`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Google-Callback
   */
  async googleCallbackAuthCallbackGoogleGet(
    requestParameters: GoogleCallbackAuthCallbackGoogleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.googleCallbackAuthCallbackGoogleGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Jwt
   */
  async jwtAuthJwtPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserInfoResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/jwt`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoResponseFromJSON(jsonValue)
    );
  }

  /**
   * Jwt
   */
  async jwtAuthJwtPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserInfoResponse> {
    const response = await this.jwtAuthJwtPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Login
   */
  async loginAuthLoginPostRaw(
    requestParameters: LoginAuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserInfoResponse>> {
    if (requestParameters["postLogin"] == null) {
      throw new runtime.RequiredError(
        "postLogin",
        'Required parameter "postLogin" was null or undefined when calling loginAuthLoginPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostLoginToJSON(requestParameters["postLogin"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoResponseFromJSON(jsonValue)
    );
  }

  /**
   * Login
   */
  async loginAuthLoginPost(
    requestParameters: LoginAuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserInfoResponse> {
    const response = await this.loginAuthLoginPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Oauth Login
   */
  async oauthLoginAuthOauthAuthorizationPostRaw(
    requestParameters: OauthLoginAuthOauthAuthorizationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<OAuthResponse>> {
    if (requestParameters["postOAuth"] == null) {
      throw new runtime.RequiredError(
        "postOAuth",
        'Required parameter "postOAuth" was null or undefined when calling oauthLoginAuthOauthAuthorizationPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/oauth/authorization`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostOAuthToJSON(requestParameters["postOAuth"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OAuthResponseFromJSON(jsonValue)
    );
  }

  /**
   * Oauth Login
   */
  async oauthLoginAuthOauthAuthorizationPost(
    requestParameters: OauthLoginAuthOauthAuthorizationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<OAuthResponse> {
    const response = await this.oauthLoginAuthOauthAuthorizationPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Password Reset
   */
  async passwordResetAuthUserPasswordResetPostRaw(
    requestParameters: PasswordResetAuthUserPasswordResetPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["verificationCode"] == null) {
      throw new runtime.RequiredError(
        "verificationCode",
        'Required parameter "verificationCode" was null or undefined when calling passwordResetAuthUserPasswordResetPost().'
      );
    }

    if (requestParameters["postPasswordReset"] == null) {
      throw new runtime.RequiredError(
        "postPasswordReset",
        'Required parameter "postPasswordReset" was null or undefined when calling passwordResetAuthUserPasswordResetPost().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["verificationCode"] != null) {
      queryParameters["verification_code"] =
        requestParameters["verificationCode"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/user/password-reset`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostPasswordResetToJSON(requestParameters["postPasswordReset"]),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Password Reset
   */
  async passwordResetAuthUserPasswordResetPost(
    requestParameters: PasswordResetAuthUserPasswordResetPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.passwordResetAuthUserPasswordResetPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Password Reset Email
   */
  async passwordResetEmailAuthUserPasswordResetEmailPutRaw(
    requestParameters: PasswordResetEmailAuthUserPasswordResetEmailPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling passwordResetEmailAuthUserPasswordResetEmailPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/user/password/reset/{email}`.replace(
          `{${"email"}}`,
          encodeURIComponent(String(requestParameters["email"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Password Reset Email
   */
  async passwordResetEmailAuthUserPasswordResetEmailPut(
    requestParameters: PasswordResetEmailAuthUserPasswordResetEmailPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response =
      await this.passwordResetEmailAuthUserPasswordResetEmailPutRaw(
        requestParameters,
        initOverrides
      );
    return await response.value();
  }

  /**
   * Resend Verification Email
   */
  async resendVerificationEmailAuthUserVerifyResendEmailPostRaw(
    requestParameters: ResendVerificationEmailAuthUserVerifyResendEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["postResendEmailRequest"] == null) {
      throw new runtime.RequiredError(
        "postResendEmailRequest",
        'Required parameter "postResendEmailRequest" was null or undefined when calling resendVerificationEmailAuthUserVerifyResendEmailPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/user/verify/resend-email`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostResendEmailRequestToJSON(
          requestParameters["postResendEmailRequest"]
        ),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Resend Verification Email
   */
  async resendVerificationEmailAuthUserVerifyResendEmailPost(
    requestParameters: ResendVerificationEmailAuthUserVerifyResendEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response =
      await this.resendVerificationEmailAuthUserVerifyResendEmailPostRaw(
        requestParameters,
        initOverrides
      );
    return await response.value();
  }

  /**
   * X-Callback
   */
  async xCallbackAuthCallbackPatreonGetRaw(
    requestParameters: XCallbackAuthCallbackPatreonGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["code"] == null) {
      throw new runtime.RequiredError(
        "code",
        'Required parameter "code" was null or undefined when calling xCallbackAuthCallbackPatreonGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/callback/patreon`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * X-Callback
   */
  async xCallbackAuthCallbackPatreonGet(
    requestParameters: XCallbackAuthCallbackPatreonGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.xCallbackAuthCallbackPatreonGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * X-Callback
   */
  async xCallbackAuthCallbackXGetRaw(
    requestParameters: XCallbackAuthCallbackXGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["code"] == null) {
      throw new runtime.RequiredError(
        "code",
        'Required parameter "code" was null or undefined when calling xCallbackAuthCallbackXGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/callback/x`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * X-Callback
   */
  async xCallbackAuthCallbackXGet(
    requestParameters: XCallbackAuthCallbackXGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.xCallbackAuthCallbackXGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
